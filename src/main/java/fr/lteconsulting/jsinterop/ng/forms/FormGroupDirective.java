package fr.lteconsulting.jsinterop.ng.forms;

import fr.lteconsulting.jsinterop.browser.AnonymousType717;
import fr.lteconsulting.jsinterop.browser.Array;
import fr.lteconsulting.jsinterop.browser.Event;
import fr.lteconsulting.jsinterop.ng.core.EventEmitter;
import fr.lteconsulting.jsinterop.ng.core.OnChanges;
import fr.lteconsulting.jsinterop.ng.core.SimpleChanges;
import fr.lteconsulting.jsinterop.rxjs.Observable;
import fr.lteconsulting.prebuilt.Action;
import fr.lteconsulting.prebuilt.Function1;
import jsinterop.annotations.JsProperty;
import jsinterop.annotations.JsType;

/** 
  * base type: "c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive".FormGroupDirective
  * flags: 32768
  * declared in: c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts:608
  * 1 constructors
 */
@JsType(isNative=true, namespace="ng.forms", name="FormGroupDirective")
public class FormGroupDirective extends Form implements ControlContainer, OnChanges
{

    /*
        Constructors
    */
    public FormGroupDirective(Array<Object> _validators, Array<Object> _asyncValidators){
    }

    /*
        Properties
    */

    public Object _asyncValidators;

    @JsProperty( name = "_asyncValidators")
    public native Object get_asyncValidators();

    @JsProperty( name = "_asyncValidators")
    public native void set_asyncValidators( Object value );

    public Object _oldForm;

    @JsProperty( name = "_oldForm")
    public native Object get_oldForm();

    @JsProperty( name = "_oldForm")
    public native void set_oldForm( Object value );

    public Object _submitted;

    @JsProperty( name = "_submitted")
    public native Object get_submitted();

    @JsProperty( name = "_submitted")
    public native void set_submitted( Object value );

    public Object _validators;

    @JsProperty( name = "_validators")
    public native Object get_validators();

    @JsProperty( name = "_validators")
    public native void set_validators( Object value );

    /** 
      * The {@link FormControl}, {@link FormGroup}, or {@link FormArray}
      * that backs this directive. Most properties fall through to that
      * instance.
     */
    public AbstractControl control;

    @JsProperty( name = "control")
    public native AbstractControl getControl();

    @JsProperty( name = "control")
    public native void setControl( AbstractControl value );

    public Array<FormControlName> directives;

    @JsProperty( name = "directives")
    public native Array<FormControlName> getDirectives();

    @JsProperty( name = "directives")
    public native void setDirectives( Array<FormControlName> value );

    /** 
      * A control is `dirty` if the user has changed the value
      * in the UI.
      * 
      * Note that programmatic changes to a control's value will
      * *not* mark it dirty.
     */
    public Boolean dirty;

    @JsProperty( name = "dirty")
    public native Boolean getDirty();

    @JsProperty( name = "dirty")
    public native void setDirty( Boolean value );

    /** 
      * A control is `disabled` when its `status === DISABLED`.
      * 
      * Disabled controls are exempt from validation checks and
      * are not included in the aggregate value of their ancestor
      * controls.
     */
    public Boolean disabled;

    @JsProperty( name = "disabled")
    public native Boolean getDisabled();

    @JsProperty( name = "disabled")
    public native void setDisabled( Boolean value );

    /** 
      * A control is `enabled` as long as its `status !== DISABLED`.
      * 
      * In other words, it has a status of `VALID`, `INVALID`, or
      * `PENDING`.
     */
    public Boolean enabled;

    @JsProperty( name = "enabled")
    public native Boolean getEnabled();

    @JsProperty( name = "enabled")
    public native void setEnabled( Boolean value );

    /** 
      * Returns any errors generated by failing validation. If there
      * are no errors, it will return null.
     */
    public AnonymousType717 errors;

    @JsProperty( name = "errors")
    public native AnonymousType717 getErrors();

    @JsProperty( name = "errors")
    public native void setErrors( AnonymousType717 value );

    public FormGroup form;

    @JsProperty( name = "form")
    public native FormGroup getForm();

    @JsProperty( name = "form")
    public native void setForm( FormGroup value );

    /** 
      * Get the form to which this container belongs.
     */
    public Form formDirective;

    @JsProperty( name = "formDirective")
    public native Form getFormDirective();

    @JsProperty( name = "formDirective")
    public native void setFormDirective( Form value );

    /** 
      * A control is `invalid` when its `status === INVALID`.
      * 
      * In order to have this status, the control must have failed
      * at least one of its validation checks.
     */
    public Boolean invalid;

    @JsProperty( name = "invalid")
    public native Boolean getInvalid();

    @JsProperty( name = "invalid")
    public native void setInvalid( Boolean value );

    public String name;

    @JsProperty( name = "name")
    public native String getName();

    @JsProperty( name = "name")
    public native void setName( String value );

    public EventEmitter<Object> ngSubmit;

    @JsProperty( name = "ngSubmit")
    public native EventEmitter<Object> getNgSubmit();

    @JsProperty( name = "ngSubmit")
    public native void setNgSubmit( EventEmitter<Object> value );

    public Action onReset;

    @JsProperty( name = "onReset")
    public native Action getOnReset();

    @JsProperty( name = "onReset")
    public native void setOnReset( Action value );

    public Function1<Event, Boolean> onSubmit;

    @JsProperty( name = "onSubmit")
    public native Function1<Event, Boolean> getOnSubmit();

    @JsProperty( name = "onSubmit")
    public native void setOnSubmit( Function1<Event, Boolean> value );

    /** 
      * Returns an array that represents the path from the top-level form
      * to this control. Each index is the string name of the control on
      * that level.
     */
    public Array<String> path;

    @JsProperty( name = "path")
    public native Array<String> getPath();

    @JsProperty( name = "path")
    public native void setPath( Array<String> value );

    /** 
      * A control is `pending` when its `status === PENDING`.
      * 
      * In order to have this status, the control must be in the
      * middle of conducting a validation check.
     */
    public Boolean pending;

    @JsProperty( name = "pending")
    public native Boolean getPending();

    @JsProperty( name = "pending")
    public native void setPending( Boolean value );

    /** 
      * A control is `pristine` if the user has not yet changed
      * the value in the UI.
      * 
      * Note that programmatic changes to a control's value will
      * *not* mark it dirty.
     */
    public Boolean pristine;

    @JsProperty( name = "pristine")
    public native Boolean getPristine();

    @JsProperty( name = "pristine")
    public native void setPristine( Boolean value );

    /** 
      * Emits an event every time the validation status of the control
      * is re-calculated.
     */
    public Observable<Object> statusChanges;

    @JsProperty( name = "statusChanges")
    public native Observable<Object> getStatusChanges();

    @JsProperty( name = "statusChanges")
    public native void setStatusChanges( Observable<Object> value );

    public Boolean submitted;

    @JsProperty( name = "submitted")
    public native Boolean getSubmitted();

    @JsProperty( name = "submitted")
    public native void setSubmitted( Boolean value );

    /** 
      * A control is marked `touched` once the user has triggered
      * a `blur` event on it.
     */
    public Boolean touched;

    @JsProperty( name = "touched")
    public native Boolean getTouched();

    @JsProperty( name = "touched")
    public native void setTouched( Boolean value );

    /** 
      * A control is `untouched` if the user has not yet triggered
      * a `blur` event on it.
     */
    public Boolean untouched;

    @JsProperty( name = "untouched")
    public native Boolean getUntouched();

    @JsProperty( name = "untouched")
    public native void setUntouched( Boolean value );

    /** 
      * A control is `valid` when its `status === VALID`.
      * 
      * In order to have this status, the control must have passed all its
      * validation checks.
     */
    public Boolean valid;

    @JsProperty( name = "valid")
    public native Boolean getValid();

    @JsProperty( name = "valid")
    public native void setValid( Boolean value );

    /** 
      * The value of the control. 
     */
    public Object value;

    @JsProperty( name = "value")
    public native Object getValue();

    @JsProperty( name = "value")
    public native void setValue( Object value );

    /** 
      * Emits an event every time the value of the control changes, in
      * the UI or programmatically.
     */
    public Observable<Object> valueChanges;

    @JsProperty( name = "valueChanges")
    public native Observable<Object> getValueChanges();

    @JsProperty( name = "valueChanges")
    public native void setValueChanges( Observable<Object> value );

    /*
        Methods
    */
    /** 
      * Std Signature : S(_checkFormPresent,3,,)
      * TE Signature : S(_checkFormPresent,)
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@3315
     */
    public native Object _checkFormPresent();
    /** 
      * Std Signature : S(_updateRegistrations,3,,)
      * TE Signature : S(_updateRegistrations,)
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@3246
     */
    public native Object _updateRegistrations();
    /** 
      * Std Signature : S(_updateValidators,3,,)
      * TE Signature : S(_updateValidators,)
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@3282
     */
    public native Object _updateValidators();
    /** 
      * Std Signature : S(addControl,645,,P(d638))
      * TE Signature : S(addControl,P(d638))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@2667
     */
    public native FormControl addControl(FormControlName dir);
    /** 
      * Std Signature : S(addFormArray,429,,P(d640))
      * TE Signature : S(addFormArray,P(d640))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@2956
     */
    public native void addFormArray(FormArrayName dir);
    /** 
      * Std Signature : S(addFormGroup,429,,P(d639))
      * TE Signature : S(addFormGroup,P(d639))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@2816
     */
    public native void addFormGroup(FormGroupName dir);
    /** 
      * Std Signature : S(getControl,645,,P(d638))
      * TE Signature : S(getControl,P(d638))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@2718
     */
    public native FormControl getControl(FormControlName dir);
    /** 
      * Std Signature : S(getError,3,,P(d1))
      * TE Signature : S(getError,P(d1))
      * 
     */
    public native Object getError(String errorCode);
    /** 
      * Std Signature : S(getError,3,,P(d1),P(d7<1>))
      * TE Signature : S(getError,P(d1),P(d7))
      * 
     */
    /** 
      * added from type hierarchy
     */
    public native Object getError(String errorCode, Array<String> path /* optional */);
    /** 
      * Std Signature : S(getFormArray,627,,P(d640))
      * TE Signature : S(getFormArray,P(d640))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@3047
     */
    public native FormArray getFormArray(FormArrayName dir);
    /** 
      * Std Signature : S(getFormGroup,628,,P(d639))
      * TE Signature : S(getFormGroup,P(d639))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@2907
     */
    public native FormGroup getFormGroup(FormGroupName dir);
    /** 
      * Std Signature : S(hasError,27,,P(d1))
      * TE Signature : S(hasError,P(d1))
      * 
     */
    public native Boolean hasError(String errorCode);
    /** 
      * Std Signature : S(hasError,27,,P(d1),P(d7<1>))
      * TE Signature : S(hasError,P(d1),P(d7))
      * 
     */
    /** 
      * added from type hierarchy
     */
    public native Boolean hasError(String errorCode, Array<String> path /* optional */);
    /** 
      * Std Signature : S(ngOnChanges,429,,P(d346))
      * TE Signature : S(ngOnChanges,P(d346))
      * 
     */
    /** 
      * added from type hierarchy
     */
    public native void ngOnChanges(SimpleChanges changes);
    /** 
      * Std Signature : S(removeControl,429,,P(d638))
      * TE Signature : S(removeControl,P(d638))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@2769
     */
    public native void removeControl(FormControlName dir);
    /** 
      * Std Signature : S(removeFormArray,429,,P(d640))
      * TE Signature : S(removeFormArray,P(d640))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@3000
     */
    public native void removeFormArray(FormArrayName dir);
    /** 
      * Std Signature : S(removeFormGroup,429,,P(d639))
      * TE Signature : S(removeFormGroup,P(d639))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@2860
     */
    public native void removeFormGroup(FormGroupName dir);
    /** 
      * Std Signature : S(reset,429,,)
      * TE Signature : S(reset,)
      * 
     */
    public native void reset();
    /** 
      * Std Signature : S(reset,429,,P(d3))
      * TE Signature : S(reset,P(d3))
      * 
     */
    /** 
      * added from type hierarchy
     */
    public native void reset(Object value /* optional */);
    /** 
      * Std Signature : S(resetForm,429,,)
      * TE Signature : S(resetForm,)
      * 
     */
    public native void resetForm();
    /** 
      * Std Signature : S(resetForm,429,,P(d3))
      * TE Signature : S(resetForm,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@3212
     */
    public native void resetForm(Object value /* optional */);
    /** 
      * Std Signature : S(updateModel,429,,P(d638),P(d3))
      * TE Signature : S(updateModel,P(d638),P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts@3096
     */
    public native void updateModel(FormControlName dir, Object value);
}
