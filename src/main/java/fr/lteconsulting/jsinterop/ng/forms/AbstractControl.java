package fr.lteconsulting.jsinterop.ng.forms;

import fr.lteconsulting.jsinterop.UnionOfArrayOfAsyncValidatorFnAndAsyncValidatorFn;
import fr.lteconsulting.jsinterop.UnionOfArrayOfValidatorFnAndValidatorFn;
import fr.lteconsulting.jsinterop.UnionOfObservableOfAnonymousType717AndPromiseOfAnonymousType717;
import fr.lteconsulting.jsinterop.browser.AnonymousType717;
import fr.lteconsulting.jsinterop.browser.Array;
import fr.lteconsulting.jsinterop.browser.PropertyKey_UnionOfNumberAndString;
import fr.lteconsulting.jsinterop.browser.UnionOfArrayOfPropertyKey_UnionOfNumberAndStringAndString;
import fr.lteconsulting.jsinterop.rxjs.Observable;
import jsinterop.annotations.JsOverlay;
import jsinterop.annotations.JsProperty;
import jsinterop.annotations.JsType;

/** 
  * base type: "c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model".AbstractControl
  * flags: 32768
  * declared in: c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts:782
  * 1 constructors
 */
@JsType(isNative=true, namespace="ng.forms", name="AbstractControl")
public class AbstractControl
{

    /*
        Constructors
    */
    public AbstractControl(ValidatorFn validator, AsyncValidatorFn asyncValidator){
    }

    /*
        Properties
    */

    public Object _asyncValidationSubscription;

    @JsProperty( name = "_asyncValidationSubscription")
    public native Object get_asyncValidationSubscription();

    @JsProperty( name = "_asyncValidationSubscription")
    public native void set_asyncValidationSubscription( Object value );

    public Object _errors;

    @JsProperty( name = "_errors")
    public native Object get_errors();

    @JsProperty( name = "_errors")
    public native void set_errors( Object value );

    public Object _parent;

    @JsProperty( name = "_parent")
    public native Object get_parent();

    @JsProperty( name = "_parent")
    public native void set_parent( Object value );

    public Object _pristine;

    @JsProperty( name = "_pristine")
    public native Object get_pristine();

    @JsProperty( name = "_pristine")
    public native void set_pristine( Object value );

    public Object _status;

    @JsProperty( name = "_status")
    public native Object get_status();

    @JsProperty( name = "_status")
    public native void set_status( Object value );

    public Object _statusChanges;

    @JsProperty( name = "_statusChanges")
    public native Object get_statusChanges();

    @JsProperty( name = "_statusChanges")
    public native void set_statusChanges( Object value );

    public Object _touched;

    @JsProperty( name = "_touched")
    public native Object get_touched();

    @JsProperty( name = "_touched")
    public native void set_touched( Object value );

    public Object _valueChanges;

    @JsProperty( name = "_valueChanges")
    public native Object get_valueChanges();

    @JsProperty( name = "_valueChanges")
    public native void set_valueChanges( Object value );

    /** 
      * A control is `dirty` if the user has changed the value
      * in the UI.
      * 
      * Note that programmatic changes to a control's value will
      * *not* mark it dirty.
     */
    public Boolean dirty;

    @JsProperty( name = "dirty")
    public native Boolean getDirty();

    @JsProperty( name = "dirty")
    public native void setDirty( Boolean value );

    /** 
      * A control is `disabled` when its `status === DISABLED`.
      * 
      * Disabled controls are exempt from validation checks and
      * are not included in the aggregate value of their ancestor
      * controls.
     */
    public Boolean disabled;

    @JsProperty( name = "disabled")
    public native Boolean getDisabled();

    @JsProperty( name = "disabled")
    public native void setDisabled( Boolean value );

    /** 
      * A control is `enabled` as long as its `status !== DISABLED`.
      * 
      * In other words, it has a status of `VALID`, `INVALID`, or
      * `PENDING`.
     */
    public Boolean enabled;

    @JsProperty( name = "enabled")
    public native Boolean getEnabled();

    @JsProperty( name = "enabled")
    public native void setEnabled( Boolean value );

    /** 
      * Returns any errors generated by failing validation. If there
      * are no errors, it will return null.
     */
    public AnonymousType717 errors;

    @JsProperty( name = "errors")
    public native AnonymousType717 getErrors__();

    @JsProperty( name = "errors")
    public native void setErrors__( AnonymousType717 value );

    /** 
      * A control is `invalid` when its `status === INVALID`.
      * 
      * In order to have this status, the control must have failed
      * at least one of its validation checks.
     */
    public Boolean invalid;

    @JsProperty( name = "invalid")
    public native Boolean getInvalid();

    @JsProperty( name = "invalid")
    public native void setInvalid( Boolean value );

    /** 
      * The parent control.
     */
    public UnionOfFormArrayAndFormGroup parent;

    @JsProperty( name = "parent")
    public native UnionOfFormArrayAndFormGroup getParent__();

    @JsProperty( name = "parent")
    public native void setParent__( UnionOfFormArrayAndFormGroup value );

    @JsOverlay
    public final void setParent__( FormArray value ) { setParent__(UnionOfFormArrayAndFormGroup.ofFormArray( value )); }

    @JsOverlay
    public final void setParent__( FormGroup value ) { setParent__(UnionOfFormArrayAndFormGroup.ofFormGroup( value )); }

    /** 
      * A control is `pending` when its `status === PENDING`.
      * 
      * In order to have this status, the control must be in the
      * middle of conducting a validation check.
     */
    public Boolean pending;

    @JsProperty( name = "pending")
    public native Boolean getPending();

    @JsProperty( name = "pending")
    public native void setPending( Boolean value );

    /** 
      * A control is `pristine` if the user has not yet changed
      * the value in the UI.
      * 
      * Note that programmatic changes to a control's value will
      * *not* mark it dirty.
     */
    public Boolean pristine;

    @JsProperty( name = "pristine")
    public native Boolean getPristine();

    @JsProperty( name = "pristine")
    public native void setPristine( Boolean value );

    /** 
      * Retrieves the top-level ancestor of this control.
     */
    public AbstractControl root;

    @JsProperty( name = "root")
    public native AbstractControl getRoot();

    @JsProperty( name = "root")
    public native void setRoot( AbstractControl value );

    /** 
      * The validation status of the control. There are four possible
      * validation statuses:
      * 
      * * **VALID**:  control has passed all validation checks
      * * **INVALID**: control has failed at least one validation check
      * * **PENDING**: control is in the midst of conducting a validation check
      * * **DISABLED**: control is exempt from validation checks
      * 
      * These statuses are mutually exclusive, so a control cannot be
      * both valid AND invalid or invalid AND disabled.
     */
    public String status;

    @JsProperty( name = "status")
    public native String getStatus();

    @JsProperty( name = "status")
    public native void setStatus( String value );

    /** 
      * Emits an event every time the validation status of the control
      * is re-calculated.
     */
    public Observable<Object> statusChanges;

    @JsProperty( name = "statusChanges")
    public native Observable<Object> getStatusChanges();

    @JsProperty( name = "statusChanges")
    public native void setStatusChanges( Observable<Object> value );

    /** 
      * A control is marked `touched` once the user has triggered
      * a `blur` event on it.
     */
    public Boolean touched;

    @JsProperty( name = "touched")
    public native Boolean getTouched();

    @JsProperty( name = "touched")
    public native void setTouched( Boolean value );

    /** 
      * A control is `untouched` if the user has not yet triggered
      * a `blur` event on it.
     */
    public Boolean untouched;

    @JsProperty( name = "untouched")
    public native Boolean getUntouched();

    @JsProperty( name = "untouched")
    public native void setUntouched( Boolean value );

    /** 
      * A control is `valid` when its `status === VALID`.
      * 
      * In order to have this status, the control must have passed all its
      * validation checks.
     */
    public Boolean valid;

    @JsProperty( name = "valid")
    public native Boolean getValid();

    @JsProperty( name = "valid")
    public native void setValid( Boolean value );

    /** 
      * The value of the control.
     */
    public Object value;

    @JsProperty( name = "value")
    public native Object getValue__();

    @JsProperty( name = "value")
    public native void setValue__( Object value );

    /** 
      * Emits an event every time the value of the control changes, in
      * the UI or programmatically.
     */
    public Observable<Object> valueChanges;

    @JsProperty( name = "valueChanges")
    public native Observable<Object> getValueChanges();

    @JsProperty( name = "valueChanges")
    public native void setValueChanges( Observable<Object> value );

    /*
        Methods
    */
    /** 
      * Std Signature : S(_calculateStatus,3,,)
      * TE Signature : S(_calculateStatus,)
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@10143
     */
    public native Object _calculateStatus();
    /** 
      * Std Signature : S(_cancelExistingSubscription,3,,)
      * TE Signature : S(_cancelExistingSubscription,)
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@8299
     */
    public native Object _cancelExistingSubscription();
    /** 
      * Std Signature : S(_runAsyncValidator,3,,)
      * TE Signature : S(_runAsyncValidator,)
      * 
     */
    public native Object _runAsyncValidator();
    /** 
      * Std Signature : S(_runAsyncValidator,3,,P(d3))
      * TE Signature : S(_runAsyncValidator,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@8255
     */
    public native Object _runAsyncValidator(Object emitEvent /* optional */);
    /** 
      * Std Signature : S(_runValidator,3,,)
      * TE Signature : S(_runValidator,)
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@8226
     */
    public native Object _runValidator();
    /** 
      * Std Signature : S(_setInitialStatus,3,,)
      * TE Signature : S(_setInitialStatus,)
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@8193
     */
    public native Object _setInitialStatus();
    /** 
      * Std Signature : S(_updateAncestors,3,,P(d3))
      * TE Signature : S(_updateAncestors,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@7353
     */
    public native Object _updateAncestors(Object onlySelf);
    /** 
      * Std Signature : S(asyncValidator,U(-357<C(----3----)>,88<4>),,P(d626))
      * TE Signature : S(asyncValidator,P(d626))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/validators.d.ts@3143
     */
    public native UnionOfObservableOfAnonymousType717AndPromiseOfAnonymousType717 asyncValidator(AbstractControl c);
    /** 
      * Std Signature : S(clearAsyncValidators,429,,)
      * TE Signature : S(clearAsyncValidators,)
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@5350
      * Empties out the async validator list.
     */
    public native void clearAsyncValidators();
    /** 
      * Std Signature : S(clearValidators,429,,)
      * TE Signature : S(clearValidators,)
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@5260
      * Empties out the sync validator list.
     */
    public native void clearValidators();
    /** 
      * Std Signature : S(disable,429,,)
      * TE Signature : S(disable,)
      * 
     */
    public native void disable();
    /** 
      * Std Signature : S(disable,429,,P(d3))
      * TE Signature : S(disable,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@6872
      * Disables the control. This means the control will be exempt from validation checks and
      * excluded from the aggregate value of any parent. Its status is `DISABLED`.
      * 
      * If the control has children, all children will be disabled to maintain the model.
     */
    public native void disable(Object opts /* optional */);
    /** 
      * Std Signature : S(enable,429,,)
      * TE Signature : S(enable,)
      * 
     */
    public native void enable();
    /** 
      * Std Signature : S(enable,429,,P(d3))
      * TE Signature : S(enable,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@7262
      * Enables the control. This means the control will be included in validation checks and
      * the aggregate value of its parent. Its status is re-calculated based on its value and
      * its validators.
      * 
      * If the control has children, all children will be enabled.
     */
    public native void enable(Object opts /* optional */);
    /** 
      * Std Signature : S(get,626,,P(d1))
      * TE Signature : S(get,P(d1))
      * 
     */
    public native AbstractControl get(String path);
    /** 
      * Std Signature : S(get,626,,P(d7<U(-2,1)>))
      * TE Signature : S(get,P(d7))
      * 
     */
    public native AbstractControl get(Array<PropertyKey_UnionOfNumberAndString> path);
    /** 
      * Std Signature : S(get,626,,P(dU(-7<U(-2,1)>,6)))
      * TE Signature : S(get,P(dU(-7,1)))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@9408
      * Retrieves a child control given the control's name or path.
      * 
      * Paths can be passed in as an array or a string delimited by a dot.
      * 
      * To get a control nested within a `person` sub-group:
      * 
      * * `this.form.get('person.name');`
      * 
      * -OR-
      * 
      * * `this.form.get(['person', 'name']);`
     */
    public native AbstractControl get(UnionOfArrayOfPropertyKey_UnionOfNumberAndStringAndString path);
    /** 
      * Std Signature : S(getError,3,,P(d1))
      * TE Signature : S(getError,P(d1))
      * 
     */
    public native Object getError(String errorCode);
    /** 
      * Std Signature : S(getError,3,,P(d1),P(d7<1>))
      * TE Signature : S(getError,P(d1),P(d7))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@9709
      * Returns error data if the control with the given path has the error specified. Otherwise
      * returns null or undefined.
      * 
      * If no path is given, it checks for the error on the present control.
     */
    public native Object getError(String errorCode, Array<String> path /* optional */);
    /** 
      * Std Signature : S(hasError,27,,P(d1))
      * TE Signature : S(hasError,P(d1))
      * 
     */
    public native Boolean hasError(String errorCode);
    /** 
      * Std Signature : S(hasError,27,,P(d1),P(d7<1>))
      * TE Signature : S(hasError,P(d1),P(d7))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@9975
      * Returns true if the control with the given path has the error specified. Otherwise
      * returns false.
      * 
      * If no path is given, it checks for the error on the present control.
     */
    public native Boolean hasError(String errorCode, Array<String> path /* optional */);
    /** 
      * Std Signature : S(markAsDirty,429,,)
      * TE Signature : S(markAsDirty,)
      * 
     */
    public native void markAsDirty();
    /** 
      * Std Signature : S(markAsDirty,429,,P(d3))
      * TE Signature : S(markAsDirty,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@6075
      * Marks the control as `dirty`.
      * 
      * This will also mark all direct ancestors as `dirty` to maintain
      * the model.
     */
    public native void markAsDirty(Object opts /* optional */);
    /** 
      * Std Signature : S(markAsPending,429,,)
      * TE Signature : S(markAsPending,)
      * 
     */
    public native void markAsPending();
    /** 
      * Std Signature : S(markAsPending,429,,P(d3))
      * TE Signature : S(markAsPending,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@6515
      * Marks the control as `pending`.
     */
    public native void markAsPending(Object opts /* optional */);
    /** 
      * Std Signature : S(markAsPristine,429,,)
      * TE Signature : S(markAsPristine,)
      * 
     */
    public native void markAsPristine();
    /** 
      * Std Signature : S(markAsPristine,429,,P(d3))
      * TE Signature : S(markAsPristine,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@6390
      * Marks the control as `pristine`.
      * 
      * If the control has any children, it will also mark all children as `pristine`
      * to maintain the model, and re-calculate the `pristine` status of all parent
      * controls.
     */
    public native void markAsPristine(Object opts /* optional */);
    /** 
      * Std Signature : S(markAsTouched,429,,)
      * TE Signature : S(markAsTouched,)
      * 
     */
    public native void markAsTouched();
    /** 
      * Std Signature : S(markAsTouched,429,,P(d3))
      * TE Signature : S(markAsTouched,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@5537
      * Marks the control as `touched`.
      * 
      * This will also mark all direct ancestors as `touched` to maintain
      * the model.
     */
    public native void markAsTouched(Object opts /* optional */);
    /** 
      * Std Signature : S(markAsUntouched,429,,)
      * TE Signature : S(markAsUntouched,)
      * 
     */
    public native void markAsUntouched();
    /** 
      * Std Signature : S(markAsUntouched,429,,P(d3))
      * TE Signature : S(markAsUntouched,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@5855
      * Marks the control as `untouched`.
      * 
      * If the control has any children, it will also mark all children as `untouched`
      * to maintain the model, and re-calculate the `touched` status of all parent
      * controls.
     */
    public native void markAsUntouched(Object opts /* optional */);
    /** 
      * Std Signature : S(patchValue,429,,P(d3))
      * TE Signature : S(patchValue,P(d3))
      * 
     */
    public native void patchValue(Object value);
    /** 
      * Std Signature : S(patchValue,429,,P(d3),P(d3))
      * TE Signature : S(patchValue,P(d3),P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@7707
      * Patches the value of the control. Abstract method (implemented in sub-classes).
     */
    public native void patchValue(Object value, Object options /* optional */);
    /** 
      * Std Signature : S(reset,429,,)
      * TE Signature : S(reset,)
      * 
     */
    public native void reset();
    /** 
      * Std Signature : S(reset,429,,P(d3))
      * TE Signature : S(reset,P(d3))
      * 
     */
    public native void reset(Object value /* optional */);
    /** 
      * Std Signature : S(reset,429,,P(d3),P(d3))
      * TE Signature : S(reset,P(d3),P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@7857
      * Resets the control. Abstract method (implemented in sub-classes).
     */
    public native void reset(Object value /* optional */, Object options /* optional */);
    /** 
      * Std Signature : S(setAsyncValidators,429,,P(d7<F--S(?,U(-357<C(----3----)>,88<7>),,P(d626))------)>))
      * TE Signature : S(setAsyncValidators,P(d7))
      * 
     */
    public native void setAsyncValidators(Array<AsyncValidatorFn> newValidator);
    /** 
      * Std Signature : S(setAsyncValidators,429,,P(dF--S(?,U(-357<C(----3----)>,88<5>),,P(d626))------)))
      * TE Signature : S(setAsyncValidators,P(dF--S(?,P(d626))------)))
      * 
     */
    public native void setAsyncValidators(AsyncValidatorFn newValidator);
    /** 
      * Std Signature : S(setAsyncValidators,429,,P(dU(-7<F--S(?,U(-357<C(----3----)>,88<8>),,P(d626))------)>,4)))
      * TE Signature : S(setAsyncValidators,P(dU(-7,F--S(?,P(d626))------))))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@5117
      * Sets the async validators that are active on this control. Calling this
      * will overwrite any existing async validators.
     */
    public native void setAsyncValidators(UnionOfArrayOfAsyncValidatorFnAndAsyncValidatorFn newValidator);
    /** 
      * Std Signature : S(setErrors,429,,P(dC(----3----)))
      * TE Signature : S(setErrors,P(dC(----3----)))
      * 
     */
    public native void setErrors(AnonymousType717 errors);
    /** 
      * Std Signature : S(setErrors,429,,P(dC(----3----)),P(d3))
      * TE Signature : S(setErrors,P(dC(----3----)),P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@8958
      * Sets errors on a form control.
      * 
      * This is used when validations are run manually by the user, rather than automatically.
      * 
      * Calling `setErrors` will also update the validity of the parent control.
      * 
      * ### Example
      * 
      * ```
      * const login = new FormControl("someLogin");
      * login.setErrors({
      *    "notUnique": true
      * });
      * 
      * expect(login.valid).toEqual(false);
      * expect(login.errors).toEqual({"notUnique": true});
      * 
      * login.setValue("someOtherLogin");
      * 
      * expect(login.valid).toEqual(true);
      * ```
     */
    public native void setErrors(AnonymousType717 errors, Object opts /* optional */);
    /** 
      * Std Signature : S(setParent,429,,P(d627))
      * TE Signature : S(setParent,P(d627))
      * 
     */
    public native void setParent(FormArray parent);
    /** 
      * Std Signature : S(setParent,429,,P(d628))
      * TE Signature : S(setParent,P(d628))
      * 
     */
    public native void setParent(FormGroup parent);
    /** 
      * Std Signature : S(setParent,429,,P(dU(-627,628)))
      * TE Signature : S(setParent,P(dU(-627,628)))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@7393
     */
    public native void setParent(UnionOfFormArrayAndFormGroup parent);
    /** 
      * Std Signature : S(setValidators,429,,P(d7<F--S(?,C(----3----),,P(d626))------)>))
      * TE Signature : S(setValidators,P(d7))
      * 
     */
    public native void setValidators(Array<ValidatorFn> newValidator);
    /** 
      * Std Signature : S(setValidators,429,,P(dF--S(?,C(----3----),,P(d626))------)))
      * TE Signature : S(setValidators,P(dF--S(?,P(d626))------)))
      * 
     */
    public native void setValidators(ValidatorFn newValidator);
    /** 
      * Std Signature : S(setValidators,429,,P(dU(-7<F--S(?,C(----3----),,P(d626))------)>,4)))
      * TE Signature : S(setValidators,P(dU(-7,F--S(?,P(d626))------))))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@4894
      * Sets the synchronous validators that are active on this control.  Calling
      * this will overwrite any existing sync validators.
     */
    public native void setValidators(UnionOfArrayOfValidatorFnAndValidatorFn newValidator);
    /** 
      * Std Signature : S(setValue,429,,P(d3))
      * TE Signature : S(setValue,P(d3))
      * 
     */
    public native void setValue(Object value);
    /** 
      * Std Signature : S(setValue,429,,P(d3),P(d3))
      * TE Signature : S(setValue,P(d3),P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@7545
      * Sets the value of the control. Abstract method (implemented in sub-classes).
     */
    public native void setValue(Object value, Object options /* optional */);
    /** 
      * Std Signature : S(updateValueAndValidity,429,,)
      * TE Signature : S(updateValueAndValidity,)
      * 
     */
    public native void updateValueAndValidity();
    /** 
      * Std Signature : S(updateValueAndValidity,429,,P(d3))
      * TE Signature : S(updateValueAndValidity,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/model.d.ts@8086
      * Re-calculates the value and validation status of the control.
      * 
      * By default, it will also update the value and validity of its ancestors.
     */
    public native void updateValueAndValidity(Object opts /* optional */);
    /** 
      * Std Signature : S(validator,C(----3----),,P(d626))
      * TE Signature : S(validator,P(d626))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/validators.d.ts@3035
     */
    public native AnonymousType717 validator(AbstractControl c);
}
