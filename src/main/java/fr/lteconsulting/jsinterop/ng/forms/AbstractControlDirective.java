package fr.lteconsulting.jsinterop.ng.forms;

import fr.lteconsulting.jsinterop.browser.AnonymousType717;
import fr.lteconsulting.jsinterop.browser.Array;
import fr.lteconsulting.jsinterop.rxjs.Observable;
import jsinterop.annotations.JsPackage;
import jsinterop.annotations.JsProperty;
import jsinterop.annotations.JsType;

/** 
  * base type: "c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/abstract_control_directive".AbstractControlDirective
  * flags: 32768
  * declared in: c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/abstract_control_directive.d.ts:341

  * Base class for control directives.
  * 
  * Only used internally in the forms module.
 */
@JsType(isNative=true, namespace=JsPackage.GLOBAL, name="Object")
public interface AbstractControlDirective
{

    /*
        Properties
    */

    /** 
      * The {@link FormControl}, {@link FormGroup}, or {@link FormArray}
      * that backs this directive. Most properties fall through to that
      * instance.
     */
    @JsProperty( name = "control")
    AbstractControl getControl();

    @JsProperty( name = "control")
    void setControl( AbstractControl value );

    /** 
      * A control is `dirty` if the user has changed the value
      * in the UI.
      * 
      * Note that programmatic changes to a control's value will
      * *not* mark it dirty.
     */
    @JsProperty( name = "dirty")
    Boolean getDirty();

    @JsProperty( name = "dirty")
    void setDirty( Boolean value );

    /** 
      * A control is `disabled` when its `status === DISABLED`.
      * 
      * Disabled controls are exempt from validation checks and
      * are not included in the aggregate value of their ancestor
      * controls.
     */
    @JsProperty( name = "disabled")
    Boolean getDisabled();

    @JsProperty( name = "disabled")
    void setDisabled( Boolean value );

    /** 
      * A control is `enabled` as long as its `status !== DISABLED`.
      * 
      * In other words, it has a status of `VALID`, `INVALID`, or
      * `PENDING`.
     */
    @JsProperty( name = "enabled")
    Boolean getEnabled();

    @JsProperty( name = "enabled")
    void setEnabled( Boolean value );

    /** 
      * Returns any errors generated by failing validation. If there
      * are no errors, it will return null.
     */
    @JsProperty( name = "errors")
    AnonymousType717 getErrors();

    @JsProperty( name = "errors")
    void setErrors( AnonymousType717 value );

    /** 
      * A control is `invalid` when its `status === INVALID`.
      * 
      * In order to have this status, the control must have failed
      * at least one of its validation checks.
     */
    @JsProperty( name = "invalid")
    Boolean getInvalid();

    @JsProperty( name = "invalid")
    void setInvalid( Boolean value );

    /** 
      * Returns an array that represents the path from the top-level form
      * to this control. Each index is the string name of the control on
      * that level.
     */
    @JsProperty( name = "path")
    Array<String> getPath();

    @JsProperty( name = "path")
    void setPath( Array<String> value );

    /** 
      * A control is `pending` when its `status === PENDING`.
      * 
      * In order to have this status, the control must be in the
      * middle of conducting a validation check.
     */
    @JsProperty( name = "pending")
    Boolean getPending();

    @JsProperty( name = "pending")
    void setPending( Boolean value );

    /** 
      * A control is `pristine` if the user has not yet changed
      * the value in the UI.
      * 
      * Note that programmatic changes to a control's value will
      * *not* mark it dirty.
     */
    @JsProperty( name = "pristine")
    Boolean getPristine();

    @JsProperty( name = "pristine")
    void setPristine( Boolean value );

    /** 
      * Emits an event every time the validation status of the control
      * is re-calculated.
     */
    @JsProperty( name = "statusChanges")
    Observable<Object> getStatusChanges();

    @JsProperty( name = "statusChanges")
    void setStatusChanges( Observable<Object> value );

    /** 
      * A control is marked `touched` once the user has triggered
      * a `blur` event on it.
     */
    @JsProperty( name = "touched")
    Boolean getTouched();

    @JsProperty( name = "touched")
    void setTouched( Boolean value );

    /** 
      * A control is `untouched` if the user has not yet triggered
      * a `blur` event on it.
     */
    @JsProperty( name = "untouched")
    Boolean getUntouched();

    @JsProperty( name = "untouched")
    void setUntouched( Boolean value );

    /** 
      * A control is `valid` when its `status === VALID`.
      * 
      * In order to have this status, the control must have passed all its
      * validation checks.
     */
    @JsProperty( name = "valid")
    Boolean getValid();

    @JsProperty( name = "valid")
    void setValid( Boolean value );

    /** 
      * The value of the control. 
     */
    @JsProperty( name = "value")
    Object getValue();

    @JsProperty( name = "value")
    void setValue( Object value );

    /** 
      * Emits an event every time the value of the control changes, in
      * the UI or programmatically.
     */
    @JsProperty( name = "valueChanges")
    Observable<Object> getValueChanges();

    @JsProperty( name = "valueChanges")
    void setValueChanges( Observable<Object> value );

    /*
        Methods
    */
    /** 
      * Std Signature : S(getError,3,,P(d1))
      * TE Signature : S(getError,P(d1))
      * 
     */
    Object getError(String errorCode);
    /** 
      * Std Signature : S(getError,3,,P(d1),P(d7<1>))
      * TE Signature : S(getError,P(d1),P(d7))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/abstract_control_directive.d.ts@4244
      * Returns error data if the control with the given path has the error specified. Otherwise
      * returns null or undefined.
      * 
      * If no path is given, it checks for the error on the present control.
     */
    Object getError(String errorCode, Array<String> path /* optional */);
    /** 
      * Std Signature : S(hasError,27,,P(d1))
      * TE Signature : S(hasError,P(d1))
      * 
     */
    Boolean hasError(String errorCode);
    /** 
      * Std Signature : S(hasError,27,,P(d1),P(d7<1>))
      * TE Signature : S(hasError,P(d1),P(d7))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/abstract_control_directive.d.ts@3956
      * Returns true if the control with the given path has the error specified. Otherwise
      * returns false.
      * 
      * If no path is given, it checks for the error on the present control.
     */
    Boolean hasError(String errorCode, Array<String> path /* optional */);
    /** 
      * Std Signature : S(reset,429,,)
      * TE Signature : S(reset,)
      * 
     */
    void reset();
    /** 
      * Std Signature : S(reset,429,,P(d3))
      * TE Signature : S(reset,P(d3))
      * 
     */
    /** 
      * c:/Documents/Repos/typescript2java/apis/angular4-api/tsd/@angular/forms/src/directives/abstract_control_directive.d.ts@3715
      * Resets the form control. This means by default:
      * 
      * * it is marked as `pristine`
      * * it is marked as `untouched`
      * * value is set to null
      * 
      * For more information, see {@link AbstractControl}.
     */
    void reset(Object value /* optional */);
}
